#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

/*declaration of struct inkedlist*/
typedef struct node *ptr;
typedef struct node {
    char ch[60];
    ptr next;
} item;/*each inked list contains data of 60 char, and a next pointer*/

/*declaration of functions*/
int readText(int dataStructureType , void* p);
void printText(int dataStructureType , void* p);

int main() {
    int dataStructureType;
    int error = 0;
    ptr headOfList= NULL;                    /*creat the head pointer of the inkedlist */

	printf("\nPlease choose the data structure. Enter 1 For linked list, and 2 for buffer\n\n");
	 scanf("%d", &dataStructureType);


	printf("\nPlease enter your text\n\n");

/*buffer*/
    if (dataStructureType == 2) {
	
        char *p;
        p = (char *) calloc(1, sizeof(char));
        error = readText(dataStructureType,(void*)p);
        printText(dataStructureType, p);
        if (error == 1) {
            printf("\nmemory allocation failed\n\n");
        }
    }
/*inked list*/
    else if (dataStructureType == 1)
    {

        headOfList=(item*)calloc(1,sizeof(item));
        error=readText(dataStructureType,(void*)headOfList);
        printText(dataStructureType,(void*)headOfList);
        if (error == 1) {
            printf("\nmemory allocation failed\n\n");
        }
    }
    return 0;
}

int readText(int dataStructureType , void* p)
{
    int error =0;
    int counter=0;
    char c=getchar();

    if (dataStructureType==2)							/*buffer*/
    {
        char *pointer , *q;
        pointer=(char*)p;               /*casting from given void to char*/
        
        while(c!=EOF)
        {
            if (c!='\n'){
                pointer[counter]=c;
                counter++;
                q=(char*)realloc(pointer,counter);
                if (!q) {
                    error =1;
                    exit(0);
                }
                pointer=q;
            }
            c=getchar(); /*get the next char*/
        }
    }
    else if(dataStructureType==1) /*inkedlist*/
    {
        ptr *pHead = (ptr*)p; /*casting for the given void char*/
        ptr headOfList,q;
        headOfList=*pHead;
        headOfList->next=NULL;

        while(c!=EOF)
        {
            if (c!='\n'){
                headOfList->ch[counter]=(char)c;
                counter++;
                if(counter==60) 				/*max 60 chars in each node so we need to 											creat a new node*/
                {
                    q=(ptr)calloc(1,sizeof(item));             /*creat new item node */
                    if(!q){
                        error=1;
                        exit(0);
                    }
                    q->next=NULL;
                    headOfList->next=q;
                    counter=0;
                    }
            }
            c=getchar();
        }
        }
        return error;
    }

    void printText(int dataStructureType , void* p)
    {
        int counter;
        if (dataStructureType==2)/*buffer*/
        {
            for (counter=0 ; ((char*)p)[counter] != '\0' ; counter++)
            {
                if (counter%60 == 0 && counter!=0)
                {
                    putchar('\n'); /*each row have 60 char*/
                }
                putchar(((char*)p)[counter]); /*print the char*/
            }
            putchar('\n');
        }
        else if (dataStructureType==1) /*inked list*/
        {
            ptr headOfList = (ptr)p;
            for (counter=0; headOfList->ch[counter] ; counter++) {
                putchar(headOfList->ch[counter]);
                if (counter == 60) {
                    putchar('\n');
                    counter=0;
                    headOfList = headOfList->next;
                }
            }
        }

    }





