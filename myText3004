#include <stdio.h>
#include <stdlib.h>

#define LENGTH 60

/*declaration of struct inkedlist*/
typedef struct node *ptr;
typedef struct node {
    char ch[LENGTH];
    ptr next;
} item;/*each inked list contains data of 60 char, and a next pointer*/

/*declaration of functions*/
int readText(int dataStructureType , void* p);
void printText(int dataStructureType , void* p);
void freelist (int dataStructureType , void* p);

int main() {
    int dataStructureType;
    int error = 0;

    ptr headOfList= NULL;                    /*creat the head pointer of the inkedlist */


    setbuf(stdout, 0);
    printf("\nPlease choose the data structure. Enter 1 For linked list, and 2 for buffer\n\n");

    scanf("%d", &dataStructureType);


/*buffer*/
    if (dataStructureType == 2) {

        char *p;
        p = (char *) calloc(1, sizeof(char));
        error = readText(dataStructureType,(void*)p);
        printText(dataStructureType, (void*)p);
        if (error == 1) {
            printf("\nmemory allocation failed\n\n");
        }
        freelist(dataStructureType,(void*)p); /*re-allocate*/
    }
/*inked list*/
    else if (dataStructureType == 1)
    {

        headOfList=(ptr)calloc(1,sizeof(item)); /*create thr first node*/
        error=readText(dataStructureType,(void*)headOfList);
        printText(dataStructureType,(void*)headOfList);
        if (error == 1) {
            printf("\nmemory allocation failed\n\n");
        }
        freelist(dataStructureType,(void*)headOfList); /*re-allocate*/
    }


    return 0;
}

int readText(int dataStructureType , void* p)
{
    int error =0;
    int counter=0;
    char c=getchar();

    if (dataStructureType==2)							/*buffer*/
    {
        char *pointer,*q;
        pointer=(char*)p;               /*casting from given void to char*/

        while(c!=EOF)
        {
            if (c!='\n'){
                pointer[counter]=c;
                counter++;
                q=(char *)realloc(pointer,counter);
                if (!q) {
                    error =1;
                    exit(0);
                }
                pointer=q;
            }
            c=getchar(); /*get the next char*/
        }
    }
    else if(dataStructureType==1) /*inkedlist*/
    {
        ptr p1 = (ptr)p;            /*casting for the given void char*/
        ptr newNode;
        newNode=p1;

        while(c!=EOF)
        {
            if (c!='\n'){
                p1->ch[counter]=(char)c;
                counter++;
                if(counter==LENGTH) 				/*max 60 chars in each node so we need to creat a new node*/
                {
                    newNode=(ptr)calloc(1,sizeof(item));             /*creat new item node */
                    if(!newNode){
                        error=1;
                        exit(0);
                    }
                    newNode->next=NULL;
                    p1->next=newNode;
                    p1=newNode;
                    counter=0;
                    }
            }
            c=getchar();
        }
        }
        return error;
    }

    void printText(int dataStructureType , void* p)
    {
        int counter;
        if (dataStructureType==2)/*buffer*/
        {
            for (counter=0 ; ((char*)p)[counter] != '\0' ; counter++)
            {
                if (counter%LENGTH == 0 && counter!=0)
                {
                    putchar('\n'); /*each row have 60 char*/
                }
                putchar(((char*)p)[counter]); /*print the char*/
            }
            putchar('\n');
        }
        else if (dataStructureType==1) /*inked list*/
        {
            ptr p1 = (ptr)p;
            counter=0;
            while((p1) && (p1->ch[counter] != '\0')){
                     putchar( p1->ch[counter]);
                     counter++;
                    if (counter==LENGTH) {
                        putchar('\n');
                        p1=p1->next;
                        counter=0;
                    }

                }
            }

        }

void freelist(int dataStructureType , void* p) {
if (dataStructureType==1) /*linked list*/
{
    ptr p1=(ptr)p; /*casting*/

    while (p1) {
        p1 = (p1)->next;
        free(p);
    }
}
else if (dataStructureType==2)
        {
            free(p);
        }

    }





